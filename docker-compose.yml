version: '3.8'

services:
  # Stellar XLM Blinks Backend
  stellar-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: stellar-xlm-blinks-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - STELLAR_NETWORK=testnet
      - STELLAR_HORIZON_URL=https://horizon-testnet.stellar.org
      - CORS_ORIGIN=*
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - stellar-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: stellar-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - stellar-network

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: stellar-postgres
    environment:
      - POSTGRES_DB=stellar_blinks
      - POSTGRES_USER=stellar_user
      - POSTGRES_PASSWORD=stellar_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - stellar-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: stellar-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - stellar-backend
    restart: unless-stopped
    networks:
      - stellar-network

volumes:
  redis-data:
  postgres-data:

networks:
  stellar-network:
    driver: bridge 